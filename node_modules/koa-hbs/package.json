{
  "name": "koa-hbs",
  "version": "0.4.6",
  "description": "Handlebars Templates via Generators for Koa",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/jwilm/koa-hbs.git"
  },
  "homepage": "https://github.com/jwilm/koa-hbs/",
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "koa",
    "handlebars",
    "template",
    "view",
    "render"
  ],
  "author": {
    "name": "Joe Wilm",
    "email": "jdwilm@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "handlebars": "^1.2.1",
    "glob": "^3.2.9"
  },
  "devDependencies": {
    "mocha": "^1.18.2",
    "koa": "^0.5.5",
    "supertest": "^0.11.0",
    "koa-router": "^3.1.3",
    "co": "^3.0.5"
  },
  "engines": {
    "node": ">= 0.11.9"
  },
  "readme": "koa-hbs\n=======\n\n[Handlebars](http://handlebarsjs.com) Templates via for\n[Koa](https://github.com/koajs/koa/)\n\n[![Build Status][travis-badge]][repo-url]\n\n## Usage\nkoa-hbs is middleware. We stash an instance of koa-hbs for you in the library\nso you don't have to manage it separately. Configure the default instance by\npassing an [options](#options) hash to #middleware. To render a template then, just `yield this.render('templateName');`. Here's a basic app demonstrating all that:\n\n```javascript\nvar koa = require('koa');\nvar hbs = require('koa-hbs');\n\nvar app = koa();\n\n// koa-hbs is middleware. `use` it before you want to render a view\napp.use(hbs.middleware({\n  viewPath: __dirname + '/views'\n}));\n\n// Render is attached to the koa context. Call `this.render` in your middleware\n// to attach rendered html to the koa response body.\napp.use(function *() {\n  yield this.render('main', {title: 'koa-hbs'});\n})\n\napp.listen(3000);\n```\n\nAfter a template has been rendered, the template function is cached. `#render`\naccepts two arguements - the template to render, and an object containing local\nvariables to be inserted into the template. The result is assigned to Koa's\n`this.response.body`.\n\n### Registering Helpers\nHelpers are registered using the #registerHelper method. Here is an example\nusing the default instance (helper stolen from official Handlebars\n[docs](http://handlebarsjs.com):\n\n```javascript\nhbs = require('koa-hbs');\n\nhbs.registerHelper('link', function(text, url) {\n  text = hbs.Utils.escapeExpression(text);\n  url  = hbs.Utils.escapeExpression(url);\n\n  var result = '<a href=\"' + url + '\">' + text + '</a>';\n\n  return new hbs.SafeString(result);\n});\n```\n\n`registerHelper`, `Utils`, and `SafeString` all proxy to an internal Handlebars\ninstance. If passing an alternative instance of Handlebars to the middleware\nconfigurator, make sure to do so before registering helpers via the koa-hbs proxy of the above functions, or just register your helpers directly via your Handlebars instance.\n\n### Registering Partials\nThe simple way to register partials is to stick them all in a directory, and\npass the `partialsPath` option when generating the middleware. Say your views\nare in `./views`, and your partials are in `./views/partials`. Configuring the\nmiddleware via\n\n```\napp.use(hbs.middleware({\n  viewPath: __dirname + '/views',\n  partialsPath: __dirname + '/views/partials'\n}));\n```\n\nwill cause them to be automatically registered. Alternatively, you may register partials one at a time by calling `hbs.registerPartial` which proxies to the cached handlebars `#registerPartial` method.\n\n### Layouts\nPassing `defaultLayout` with the a layout name will cause all templates to be\ninserted into the `{{{body}}}` expression of the layout. This might look like\nthe following.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>{{title}}</title>\n</head>\n<body>\n  {{{body}}}\n</body>\n</html>\n```\n\nIn addition to, or alternatively, you may specify a layout to render a template\ninto. Simply specify `{{!< layoutName }}` somewhere in your template. koa-hbs\nwill load your layout from `layoutsPath` if defined, or from `viewPath`\notherwise.\n\nAt this time, only a single content block (`{{{body}}}`) is supported.\n\n### Block content\nReserve areas in a layout by using the `block` helper like so.\n\n```html\n{{#block \"sidebar\"}}\n  <!-- default content for the sidebar block -->\n{{/block}}\n```\n\nThen in a template, use the `contentFor` helper to render content into the\nblock.\n\n```html\n{{#contentFor \"sidebar\"}}\n  <aside>\n    <h2>{{sidebarTitleLocal}}</h2>\n    <p>{{sidebarContentLocal}}</p>\n  </aside>\n{{/contentFor}}\n```\n\n### Options\nThe plan for koa-hbs is to offer identical functionality as express-hbs\n(eventaully). These options are supported _now_.\n\n- `viewPath`: [_required_] Full path from which to load templates\n  (`Array|String`)\n- `handlebars`: Pass your own instance of handlebars\n- `templateOptions`: Hash of\n  [handlebars options](http://handlebarsjs.com/execution.html#Options) to pass\n  to `template()`\n- `extname`: Alter the default template extension (default: `'.hbs'`)\n- `partialsPath`: Full path to partials directory (`Array|String`)\n- `defaultLayout`: Name of the default layout\n- `layoutsPath`: Full path to layouts directory (`String`)\n- `contentHelperName`: Alter `contentFor` helper name\n- `blockHelperName`: Alter `block` helper name\n\n## Example\nYou can run the included example via `npm install koa` and\n`node --harmony app.js` from the example folder.\n\n## Unsupported Features\n\nHere's a few things _koa-hbs_ does not plan to support unless someone can provide really compelling justification.\n\n### Async Helpers\n_koa-hbs_ does not support asynchronous helpers. No, really - just load your data before rendering a view. This helps on performance and separation of concerns in your app.\n\n### Disable template caching\nFor performance reasons, this feature is not supported. The render pipeline is pretty lean right now because there isn't much branching logic. There is probably a way to do this without much overhead, but due to tools like Grunt which can just reload your app when a template changes, what's the point?\n\n## Credits\nFunctionality and code were inspired/taken from\n[express-hbs](https://github.com/barc/express-hbs/).\n\n[travis-badge]: https://travis-ci.org/jwilm/koa-hbs.png?branch=master\n[repo-url]: https://travis-ci.org/jwilm/koa-hbs\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jwilm/koa-hbs/issues"
  },
  "_id": "koa-hbs@0.4.6",
  "_from": "koa-hbs@~0.4.6"
}

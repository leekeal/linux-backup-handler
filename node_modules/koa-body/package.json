{
  "name": "koa-body",
  "version": "0.2.0",
  "description": "A koa body parser middleware. Support multipart, urlencoded and json request bodies.",
  "main": "index.js",
  "scripts": {
    "test": "mocha --harmony-generators",
    "examples-multer": "node --harmony examples/multer.js",
    "examples-koa-router": "node --harmony examples/koa-router.js"
  },
  "author": {
    "name": "Daryl Lau",
    "email": "daryl@weak.io",
    "url": "https://github.com/dlau"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dlau/koa-body.git"
  },
  "keywords": [
    "koa",
    "urlencoded",
    "multipart",
    "json",
    "body",
    "parser",
    "form"
  ],
  "files": [
    ".gitignore",
    ".npmignore",
    ".travis.yml",
    "LICENSE",
    "Makefile",
    "README.md",
    "example.js",
    "index.js",
    "test.js"
  ],
  "dependencies": {
    "co-body": "*",
    "extend": "1.3.0",
    "formidable": "1.0.15"
  },
  "devDependencies": {
    "koa": "*",
    "koa-router": "*",
    "koa-resource-router": "*",
    "multiline": "*",
    "mocha": "*",
    "should": "*",
    "supertest": "*"
  },
  "contributors": [
    {
      "name": "Daryl Lau",
      "email": "daryl@weak.io",
      "url": "https://github.com/dlau"
    },
    {
      "name": "Charlike Mike Reagent",
      "email": "mameto_100@mail.bg",
      "url": "https://github.com/tunnckoCore"
    }
  ],
  "license": "MIT",
  "readme": "koa-body [![Build Status](https://travis-ci.org/dlau/koa-body.png)](https://travis-ci.org/dlau/koa-body) [![Dependencies Status](https://david-dm.org/dlau/koa-body/status.svg)](https://david-dm.org/dlau/koa-body)\n================\n\n> A full-feature [`koa`](https://github.com/koajs/koa) body parser middleware. Support `multipart`, `urlencoded` and `json` request bodies. Provides same functionality as Express's bodyParser - [`multer`](https://github.com/expressjs/multer). And all that is wrapped only around\n[`co-body`](https://github.com/visionmedia/co-body) and [`formidable`](https://felixge/node-formidable).\n\n## Related module\n- [`koa-better-body`](https://github.com/tunnckoCore/koa-better-body)\n\n## Install\n>Install with [npm](https://github.com/npm/npm)\n\n```\n$ npm install koa-body\n```\n\n## Features\n- 15 tests\n- can handle three type requests\n  * **multipart/form-data**\n  * **application/x-www-urlencoded**\n  * **application/json**\n- option for patch to Koa or Node, or either\n- file uploads\n- body, fields and files limiting\n- 2 dependencies only\n\n\n## Usage like [multer](https://github.com/expressjs/multer)\n> It's very simple, because you can access the fields and files in the `ctx.request.body` or `ctx.req.body` JSON object\n\n```js\nvar app      = require('koa')(),\n    koaBody   = require('koa-body');\n\napp.use(koaBody({formidable:{uploadDir: __dirname}}));\napp.use(function *(next) {\n  if (this.request.method == 'POST') {\n    console.log(this.request.body);\n    // => POST body\n    this.body = JSON.stringify(this.request.body);\n  }\n  yield next;\n});\napp.listen(3131)\nconsole.log('curl -i http://localhost:3131/ -d \"name=test\"');\n```\n**For a more comprehensive example, see** `examples/multipart.js`\n\n## Usage with [koa-router](https://github.com/alexmingoia/koa-router)\n> It's generally better to only parse the body as needed, if using a router that supports middleware composition, we can inject it only for certain routes.\n\n```js\nvar app     = require('koa')(),\n    router  = require('koa-router'),\n    koaBody = require('koa-body')();\n\napp.use(router());\n\napp.post('/users', koaBody,\n  function *(next) {\n    console.log(this.request.body);\n    // => POST body\n    this.body = JSON.stringify(this.request.body);\n  }\n);\napp.listen(3131)\nconsole.log('curl -i http://localhost:3131/ -d \"name=test\"');\n```\n\n\n## Options\n> Options available for `koa-body`. Four custom options, and others are from `raw-body` and `formidable`.\n\n- `patchNode` **{Boolean}** Patch request body to Node's `ctx.req`, default `false`\n- `patchKoa` **{Boolean}** Patch request body to Koa's `ctx.request`, default `true`\n- `jsonLimit` **{String|Integer}** The byte limit of the JSON body, default `1mb`\n- `formLimit` **{String|Integer}** The byte limit of the form body, default `56kb`\n- `encoding` **{String}** Sets encoding for incoming form fields, default `utf-8`\n- `multipart` **{Boolean}** Parse multipart bodies, default `false`\n- `formidable` **{Object}** Options to pass to the formidable multipart parser\n\n## Some options for formidable\n> See [node-formidable](https://github.com/felixge/node-formidable) for a full list of options\n- `bytesExpected` **{Integer}** The expected number of bytes in this form, default `null`\n- `maxFields` **{Integer}** Limits the number of fields that the querystring parser will decode, default `10`\n- `maxFieldsSize` **{Integer}** Limits the amount of memory a field (not file) can allocate _in bytes_, default `2mb`\n- `uploadDir` **{String}** Sets the directory for placing file uploads in, default `os.tmpDir()`\n- `keepExtensions` **{Boolean}** Files written to `uploadDir` will include the extensions of the original files, default `true`\n- `hash` **{String}** If you want checksums calculated for incoming files, set this to either `'sha1'` or `'md5'`, default `false`\n- `multiples` **{Boolean}** Multiple file uploads or no, default `true`\n\n\n**Note**: You can patch request body to Node or Koa in same time if you want.\n\n\n## Tests\n> As usual - `npm test` **or** if you have [mocha][mocha-url] globally - `mocha --harmony-generators`.\n\n```\n$ npm test\n```\n\n## License\nThe MIT License, 2014 [Charlike Mike Reagent](https://github.com/tunnckoCore) ([@tunnckoCore](https://twitter.com/tunnckoCore)) and [Daryl Lau](https://github.com/dlau) ([@daryllau](https://twitter.com/daryllau))\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dlau/koa-body/issues"
  },
  "homepage": "https://github.com/dlau/koa-body",
  "_id": "koa-body@0.2.0",
  "_from": "koa-body@^0.2.0"
}
